import telebot
from telebot import types
from configs import TOKEN, ADMIN_ID, INSTA_MESSAGE_PART, INSTA_LINK, ADDITIVES_LIST
from models import User
from services import add_user, user_exist, get_user_info, add_procedure,\
    get_user_procedure, remove_order_record, change_order_time
from datetime import datetime


bot = telebot.TeleBot(TOKEN)
admin_id = ADMIN_ID

# temporary storage of services
new_services = {"services": [],
                "additions": []}


@bot.message_handler(commands=["start"])
def start(message):
    clear_sevices()
    user = message.from_user
    first_name = user.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if user_exist(message.from_user.id):
        # welcome letter if user already exist
        bot.send_message(message.from_user.id, f"–†–∞–¥–∞ –∑–Ω–æ–≤—É –≤–∞—Å –±–∞—á–∏—Ç–∏, {first_name} ! üñê\n"
                                               f"{INSTA_MESSAGE_PART}{INSTA_LINK}",
                         parse_mode="markdown")

    else:
        # welcome letter if user not exist
        bot.send_message(message.from_user.id, f"–í—ñ—Ç–∞—é, {first_name} ! üñê\n"
                                               f"–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –¥–æ {INSTA_MESSAGE_PART}{INSTA_LINK}",
                                               parse_mode="markdown")

    """CREATING START BUTTONS"""
    check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
    check_me_time = types.KeyboardButton("–ù–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
    check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
    cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
    contacts = types.KeyboardButton("–ú–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    markup.add(check_me_in, check_me_time, check_me_replace, cancel_order, contacts)

    bot.send_message(message.from_user.id, text="–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç–∏—Å—è")
def start_create_event(message):
    """START OF CREATING ORDER"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = get_user_procedure(message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, f"{order.meeting_time} \n {order.procedure1} \n {order.procedure2}")
        cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
        check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
        markup.add(cancel_order, check_me_replace)
        bot.send_message(message.from_user.id,
                         text="–í–∏–±–∞—á–µ—Ç–µ –∞–ª–µ —É –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å \n"
                              "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å",
                         reply_markup=markup)
    else:
        # event by user id is not exists
        manikyr = types.KeyboardButton("–†—É—á–∫–∏ üíÖ")
        pedik = types.KeyboardButton("–ù—ñ–∂–∫–∏ üë£")
        markup.add(manikyr, pedik)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É", reply_markup=markup)
        bot.register_next_step_handler(message, hands_or_foots_selection)


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
def cancel_event(message):
    """REMOVE ORDER IF EXISTS"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
    markup.add(check_me_in)
    order = get_user_procedure(message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, f"{order.meeting_time} \n {order.procedure1} \n {order.procedure2}")
        remove_order_record(message.from_user.id)
        bot.send_message(message.from_user.id,
                         text="–í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å'",
                         reply_markup=markup)
    else:
        bot.send_message(message.from_user.id,
                         text="–£ –≤–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏?",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
def transfer_event(message):
    """CHANGE ORDER TIME"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = get_user_procedure(message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, text="–î–æ–±—Ä–µ, –Ω–∞ —è–∫–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å?")
        new_meeting_time = datetime(2023, 9, 10, 14, 30)
        change_order_time(order=order, meeting_time=new_meeting_time)
        bot.send_message(message.from_user.id, text="–í–∞—à –∑–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
    else:
        # event by user id is not exists
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —è–∫–∏–π –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
def recall_event(message):
    order = get_user_procedure(message.from_user.id)
    if order:
        bot.send_message(message.from_user.id,
                         text=f"–ó–≤—ñ—Å–Ω–æ, ü§ó\n"
                              f"–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {order.meeting_time}")
    else:
        # event by user id is not exists
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id,
                         text="–í–∏–±–∞—á—Ç–µ –∞–ª–µ —É –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤",
                         reply_markup=markup)


def hands_or_foots_selection(message):
    """USER SELECTED KIND OF NAILS PROCEDURE"""
    new_services["kind_nails_procedure"] = message.text[:5]

    if message.text.lower() == "—Ä—É—á–∫–∏ üíÖ":
        hands_services(message)
    elif message.text.lower() == "–Ω—ñ–∂–∫–∏ üë£":
        foots_services(message)


def hands_services(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    manik1 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
    manik2 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
    manik3 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä + —É–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")
    manik4 = types.KeyboardButton("–ù–∞—Ä–æ—â–µ–Ω–Ω—è")
    markup.add(manik1, manik2, manik3, manik4)
    bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
    bot.register_next_step_handler(message, additions)


def foots_services(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    pedik1 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
    pedik2 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
    markup.add(pedik1, pedik2)
    bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
    bot.register_next_step_handler(message, kind_of_foot_service)


def kind_of_foot_service(message):
    new_services["services"].append(message.text)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    if message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π" or message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º":
        foots_gigiena1 = types.KeyboardButton("–¢—ñ–ª—å–∫–∏ –ø–∞–ª—å—á–∏–∫–∏")
        foots_gigiena2 = types.KeyboardButton("–ü–∞–ª—å—á–∏–∫–∏ + —Å—Ç–æ–ø–∞")
        markup.add(foots_gigiena1, foots_gigiena2)
    bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
    bot.register_next_step_handler(message, additions)


def additions(message):
    new_services["services"].append(message.text)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    additions1 = types.KeyboardButton("–§—Ä–µ–Ω—á")
    additions2 = types.KeyboardButton("–°–ª–∞–π–¥–µ—Ä–∏")
    additions3 = types.KeyboardButton("–°—Ç–µ–º–ø—ñ–Ω–≥")
    additions4 = types.KeyboardButton("–§–æ–ª—å–≥–∞")
    additions5 = types.KeyboardButton("–†–æ—Å–ø–∏—Å")
    additions6 = types.KeyboardButton("–ö–∞–º—ñ–Ω—á–∏–∫–∏")
    additions7 = types.KeyboardButton("–ù–µ –ø–æ—Ç—Ä–µ–±—É—é")
    markup.add(additions1, additions2, additions3, additions4, additions5, additions6, additions7)
    bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏", reply_markup=markup)
    if len(new_services["services"]) + len(new_services["additions"]) < 4:
        bot.register_next_step_handler(message, second_event_request)
    else:
        bot.register_next_step_handler(message, final)


def second_event_request(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    new_services["additions"].append(message.text)
    if new_services["kind_nails_procedure"] == "–†—É—á–∫–∏":
        final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä")
        final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
        markup.add(final_message1, final_message2)
        bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, second_event)

    elif new_services["kind_nails_procedure"] == "–ù—ñ–∂–∫–∏":
        final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä")
        final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
        markup.add(final_message1, final_message2)
        bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, second_event)


def second_event(message):
    if message.text == "–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä":
        hands_services(message)
    elif message.text == "–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä":
        foots_services(message)
    else:
        final(message)


def final(message):
    if message.text in ADDITIVES_LIST:
        new_services["additions"].append(message.text)
    new_services["user_first_name"] = message.from_user.first_name
    if not user_exist(message.from_user.id):
        bot.send_message(message.from_user.id, text="–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É")
        bot.register_next_step_handler(message, get_user_phone)
    else:
        new_services["user_phone"] = get_user_info(message.from_user.id).user_mobile
        event_to_db(user_id=message.from_user.id, time=datetime.utcnow())


def get_user_phone(message):
    try:
        phone = str(message.text.replace("+", "").replace("38", ""))
        print(f"LEN PHONE: {len(phone)}")
        if phone.isdigit() and phone.startswith("0") and len(phone) == 10:
            new_services["user_phone"] = phone
            """IF PHONE IS VALID ADD USER TO DATABASE"""
            user = User(user_id=message.from_user.id,
                        username=message.from_user.username,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name,
                        mobile=new_services["user_phone"])
            add_user(user)
            event_to_db(user_id=message.from_user.id, time=datetime.utcnow())

        else:
            """IF PHONE IS NOT VALID TRY AGAIN"""
            bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, get_user_phone)

    except AttributeError:
        bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, get_user_phone)


def event_to_db(user_id: int, time: datetime):
    order_message = f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {new_services['user_first_name']}\n" \
                    f"{'|'.join(new_services['services'])}\n" \
                    f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {'|'.join(new_services['additions'])}\n" \
                    f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {new_services['user_phone']}"
    print(order_message)
    bot.send_message(admin_id, order_message)
    add_procedure(new_services=new_services, user_id=user_id, time=time)
    bot.send_message(user_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å \n"
                              f"{order_message}")
    clear_sevices()


def clear_sevices():
    new_services["services"].clear()
    new_services["additions"].clear()


if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
